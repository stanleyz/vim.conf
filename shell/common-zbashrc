# Vi mode bash key bindings
#stty -ixon
#set -o vi
#bind '"\C-a": beginning-of-line'
#bind '"\C-e": end-of-line'
#bind '"\C-k": kill-line'
#bind '"\C-p": previous-history'
#bind '"\C-n": next-history'
#bind '"\C-l": clear-screen'
#bind '"\C-w": backward-kill-word'

# Fall back to emacs mode now
set -o emacs

# alias -----------------------------------------------------------------------
alias grep='grep --color'
# Interprate color
alias less='less -R'
alias xda='tmux detach -a'
alias sudo='sudo -E '
alias cddl='cd ~/Downloads'
alias emacs='emacs -nw'
alias xs='tmux-cssh'
alias vboxm="VBoxManage"
alias vml="VBoxManage list vms"
alias vmlr="VBoxManage list runningvms"
alias vim='nvim'

# general export --------------------------------------------------------------
export EDITOR='nvim'

# less colors -----------------------------------------------------------------
export LESS_TERMCAP_mb=$'\E[01;31m'       # begin blinking
export LESS_TERMCAP_md=$'\E[01;38;5;74m'  # begin bold
export LESS_TERMCAP_me=$'\E[0m'           # end mode
export LESS_TERMCAP_se=$'\E[0m'           # end standout-mode
export LESS_TERMCAP_so=$'\E[38;5;016m\E[48;5;220m'    # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'           # end underline
export LESS_TERMCAP_us=$'\E[04;38;5;146m' # begin underline

# Bash history ----------------------------------------------------------------
export HISTCONTROL=ignoreboth:erasedups  # no duplicate entries
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=100000               # big big history
export HISTTIMEFORMAT="%d/%m/%y %T "

# Save and reload the history after each command finishes
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

# FZF settings ----------------------------------------------------------------
# Use ~~ as the trigger sequence instead of the default ..
export FZF_COMPLETION_TRIGGER='..'
# Options to fzf command
export FZF_COMPLETION_OPTS='+c -x'

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

# Include ~/bin if it's not in the PATH variable
[[ "$PATH" == *~/bin* ]] || export PATH="~/bin:$PATH"

# Virtualenvwrapper
# load virtualenvwrapper for python (after custom PATHs)
venvwrap="virtualenvwrapper.sh"
/usr/bin/which $venvwrap > /dev/null 2>&1
if [ $? -eq 0 ]; then
    venvwrap=`/usr/bin/which $venvwrap`
    source $venvwrap
fi

# Platform specific settings --------------------------------------------------
platform=$(uname)
case $platform in 
  Darwin)
    alias ls='ls -G'
    alias ftpup='sudo -s launchctl load -w /System/Library/LaunchDaemons/ftp.plist'
    alias ftpdown='sudo -s launchctl unload -w /System/Library/LaunchDaemons/ftp.plist'

    export DYLD_LIBRARY_PATH=/usr/local/mysql/lib

    if [ `ps aux |grep ssh-agent | grep -v grep | wc -l` -lt 1 ]; then
      eval `ssh-agent -s` > /dev/null
    fi
    ssh-add > /dev/null 2>&1

    ;;
  Linux)
    alias ls='ls --color'
    alias docker='sudo docker'
    ;;
esac

# functions -------------------------------------------------------------------
# VNC via ssh tunnel
vnc5901via22() {
  if [ "X$(netstat -an | grep 127.0.0.1.5901)" != "X" ]; then
    echo "Already binded"
    return 1
  fi
  ssh -N -T -L 5901:localhost:5901 $1 &
}
# Git
gdbranch() {
  branch=$1
  
  git push origin --delete $branch
  git branch -D $branch
}
# Docker
rac() {
  docker rm $(docker ps -a | grep -v CONTAINER | grep -v _keep | awk '{print $1}')
}
rai() {
  docker rmi $(docker images | grep '<none>' | awk '{print $3}')
}
dockerunbash() { 
  host_name=$3
  c_name=$2
  i_name=$1
  cmd="docker run -ti"
  if [[ "X$c_name" != "X" ]]; then
    cmd="$cmd --name='$c_name'"
  fi
  if [[ "X$host_name" != "X" ]]; then
    cmd="$cmd -h $host_name"
  fi
  cmd="$cmd $i_name /bin/bash"
  $cmd
}

doexecbash() {
  c_id=$1
  docker exec -ti $c_id /bin/bash --login
}

sshkeyrm() {
  ssh-keygen -f ~/.ssh/known_hosts -R $1
}

vms () { 
  VBoxHeadless -s $1 -v off & 
  i=0
  while [ $i -lt 60 ]; do
    ip=$(VBoxManage guestproperty enumerate $1 | grep -i ip)
    if [[ "X$ip" == "X" ]]; then
      echo "Starting..."
      sleep 2
      i=$((i+2))
    else
      echo $ip
      break
    fi
  done 
}
vmip() {
  VBoxManage guestproperty enumerate $1 |grep -i ip
}
vmd () { VBoxManage controlvm $1 $2; }
vmrdp () { VBoxManage controlvm $1 vrde $2; }
xopen () { cd ~/Documents/xopen/$1; }

xfolder() {
  if [ $# -lt 1 ]; then
    echo "I need a host to work on..."
    exit 1
  fi
  # make the first hostname as a template to compare with other hostnames
  first_hostname=$1
  shift
  ts_name=""
  # Compare character by character with the first argument.
  for j in $(seq 0 ${#first_hostname})
  do
    for i in $*
    do
      common_char=${first_hostname:$j:1}
      if [ "X${i:$j:1}" != "X$common_char" ]; then
        common_char="_"
        break
      fi
    done
    ts_name="${ts_name}${common_char}"
  done

  if [ -z ${ts_name} ]; then
    if [[ -z ${first_hostname} ]]; then
      ts_name="unknown_name_$RANDOM"
    else
      ts_name=$first_hostname
    fi
  else
    ts_name=$(echo $ts_name | sed 's/[@.]/_/g')
  fi
  tmux-cfolder -ts ${ts_name} $first_hostname $*
}

hostx() {
  if [[ $# -lt 2 ]]; then
    echo "No enough parameters provided!"
    return 1
  fi
  host=$1
  srv=""
  shift
  for i in $*
  do
    range=$(echo $i | sed 's/\.\./\^/')
    start=${range%^*} 
    stop=${range#*^} 
    for j in $(seq $start $stop)
    do
      host $(echo $host | sed s/?/$j/) 
    done
  done
}


xsh() {
  if [ $# -lt 1 ]; then
    echo "I need a host to work on..."
    exit 1
  fi
  # make the first hostname as a template to compare with other hostnames
  first_hostname=$1
  shift
  ts_name=""
  # Compare character by character with the first argument.
  for j in $(seq 0 ${#first_hostname})
  do
    for i in $*
    do
      common_char=${first_hostname:$j:1}
      if [ "X${i:$j:1}" != "X$common_char" ]; then
        common_char="_"
        break
      fi
    done
    ts_name="${ts_name}${common_char}"
  done

  if [ -z ${ts_name} ]; then
    if [[ -z ${first_hostname} ]]; then
      ts_name="unknown_name_$RANDOM"
    else
      ts_name=$first_hostname
    fi
  else
    ts_name=$(echo $ts_name | sed 's/[@.]/_/g')
  fi
  tmux-cssh -ts ${ts_name} $first_hostname $*
}

hostx() {
  if [[ $# -lt 2 ]]; then
    echo "No enough parameters provided!"
    return 1
  fi
  host=$1
  srv=""
  shift
  for i in $*
  do
    range=$(echo $i | sed 's/\.\./\^/')
    start=${range%^*} 
    stop=${range#*^} 
    for j in $(seq $start $stop)
    do
      host $(echo $host | sed s/?/$j/) 
    done
  done
}

msr() {
  if [[ "X$#" != "X1" ]]; then
    echo "One and only one param needed"
    return 1
  fi
  host=$1
  mosh $1 -- /bin/bash -c "tmux at || tmux"
}

ssr() {
  if [[ "X$#" != "X1" ]]; then
    echo "One and only one param needed"
    return 1
  fi
  host=$1
  ssh $1 -t "tmux at || tmux"
}
function x() {
if [[ $# -gt 0 ]]; then
  tmux $@
else
  tmux at || tmux
fi
}

function cgrep() {
which printf >/dev/null 2>&1 && print=printf || print=print # Mandriva doesn't know about printf

hide='eval tput civis'
show='eval tput cnorm'
CLS=$(tput clear)
bel=$(tput bel)

case ${UNAME} in
  AIX)
    # text / foreground
    N=$(${print} '\033[1;30m')
    n=$(${print} '\033[0;30m')
    R=$(${print} '\033[1;31m')
    r=$(${print} '\033[0;31m')
    G=$(${print} '\033[1;32m')
    g=$(${print} '\033[0;32m')
    Y=$(${print} '\033[1;33m')
    y=$(${print} '\033[0;33m')
    B=$(${print} '\033[1;34m')
    b=$(${print} '\033[0;34m')
    M=$(${print} '\033[1;35m')
    m=$(${print} '\033[0;35m')
    C=$(${print} '\033[1;36m')
    c=$(${print} '\033[0;36m')
    W=$(${print} '\033[1;37m')
    w=$(${print} '\033[0;37m')
    END=$(${print} '\033[0m')

    # background
    RN=$(${print} '\033[6;40m')
    Rn=$(${print} '\033[40m')
    RR=$(${print} '\033[6;41m')
    Rr=$(${print} '\033[41m')
    RG=$(${print} '\033[6;42m')
    Rg=$(${print} '\033[42m')
    RY=$(${print} '\033[6;43m')
    Ry=$(${print} '\033[43m')
    RB=$(${print} '\033[6;44m')
    Rb=$(${print} '\033[44m')
    RM=$(${print} '\033[6;45m')
    Rm=$(${print} '\033[45m')
    RC=$(${print} '\033[6;46m')
    Rc=$(${print} '\033[46m')
    RW=$(${print} '\033[6;47m')
    Rw=$(${print} '\033[47m')

    HIGH=$(tput bold)
    SMUL=$(tput smul)
    RMUL=$(tput rmul)
    BLINK=$(tput blink)
    REVERSE=$(tput smso)
    REVERSO=$(tput rmso)
    ;;
  *)
    # text / foreground
    n=$(tput setaf 0)
    r=$(tput setaf 1)
    g=$(tput setaf 2)
    y=$(tput setaf 3)
    b=$(tput setaf 4)
    m=$(tput setaf 5)
    c=$(tput setaf 6)
    w=$(tput setaf 7)
    N=$(tput setaf 8)
    R=$(tput setaf 9)
    G=$(tput setaf 10)
    Y=$(tput setaf 11)
    B=$(tput setaf 12)
    M=$(tput setaf 13)
    C=$(tput setaf 14)
    W=$(tput setaf 15)
    END=$(tput sgr0)

    HIGH=$(tput bold)
    SMUL=$(tput smul)
    RMUL=$(tput rmul)
    BLINK=$(tput blink)
    REVERSE=$(tput smso)
    REVERSO=$(tput rmso)

    # background
    Rn=$(tput setab 0)
    Rr=$(tput setab 1)
    Rg=$(tput setab 2)
    Ry=$(tput setab 3)
    Rb=$(tput setab 4)
    Rm=$(tput setab 5)
    Rc=$(tput setab 6)
    Rw=$(tput setab 7)
    RN=$(tput setab 8)
    RR=$(tput setab 9)
    RG=$(tput setab 10)
    RY=$(tput setab 11)
    RB=$(tput setab 12)
    RM=$(tput setab 13)
    RC=$(tput setab 14)
    RW=$(tput setab 15)
    ;;
esac

BLUEf=${B}
BLUE=${b}
REDf=${R}
RED=${r}
GREENf=${G}
GREEN=${g}
YELLOWf=${Y}
YELLOW=${y}
MANGENTAf=${M}
MANGENTA=${m}
WHITEf=${W}
WHITE=${w}
CYANf=${C}
CYAN=${c}

colors=($BLUEf $BLUE $REDf $RED $GREENf $GREEN $YELLOWf $YELLOW $MANGENTAf $MANGENTA $WHITEf $WHITE $CYANf $CYAN)
replace=""
for i in $@
do
  color=${colors[$((RANDOM % 14))]}
  replace="$replace s#$i#$color$REVERSE$Rn$i$END#g;"
done
perl < /dev/null > /dev/null 2>&1
if [[ $? != 0 ]]; then
  echo "Perl not found, please install one"
  exit
fi
perl -pe "$replace"
}
